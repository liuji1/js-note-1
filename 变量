一、变量的类型
　　Javascript和Java、C这些语言不同，它是一种无类型、弱检测的语言。
　　它对变量的定义并不需要声明变量类型，我们只要通过赋值的形式，可以将各种类型的数据赋值给同一个变量。例如：
　　
　　i = 100;//number类型
　　i = "char";//string类型
　　i={x:4};//Object类型
　　i=[1,2,3];//Array类型
　　
二、变量的声明
　　JS中变量申明分显式申明和隐式申明。
　　var i=100;//显式申明
　　i=100;//隐式申明
　　
三、全局变量和局部变量 
　　当JS解析器执行时，首先就会在执行环境里构建一个全局对象，我们定义的全局属性就是做为该对象的属性读取，
　　在顶层代码中我们使用this关键字和window对象都可以访问到它。而函数体中的局部变量只在函数执行时生成的调用对象中存在，
　　函数执行完毕时局部变量即刻销毁。因此在程序设计中我们需要考虑如何合理声明变量，
　　这样既减小了不必要的内存开销，同时能很大程度地避免变量重复定义而覆盖先前定义的变量所造成的Debug麻烦。
　　
　　例1：(错误)
        function square(num){   
            total=num*num; //这是操作全局变量。   
            return total;   
        }   
       val total=50;   
       val number=square(20);   
       alert(total);//total的值变成了400。
       
    例2：(正确)
        function square(num){   
        var total=num*num;    
        return total;   
}   
　　
四、变量作用域 
　　任何程序语言中变量的作用域都是一个很关键的细节。
　　JS中变量的作用域相对与JAVA、C这类语言显得更自由，一个很大的特征就是JS变量没有块级作用域，函数中的变量在整个函数都中有效.
　　
　　例：
        <SCRIPT LANGUAGE="JavaScript" type="text/javascript"> 
        //定义一个输出函数 
        function outPut(s){ 
        document.writeln(s) 
        } 
        //全局变量 
        var i=0; 
        //定义外部函数 
        function outer(){ 
        //访问全局变量 
        outPut(i); // 0 
        //定义一个类部函数 
        function inner(){ 
        //定义局部变量 
        var i = 1; 
        // i=1; 如果用隐式申明　那么就覆盖了全局变量i 
        outPut(i); //1 
        } 
        inner(); 
        outPut(i); //0 
        } 
        outer(); 
        </SCRIPT> 
        
    
